#!/bin/bash

unset _CACHE_PACKAGE_LOCAL _CACHE_PACKAGE_GLOBAL _DEBUG_DEPENDS_LIST _DEBUG_PACKAGE_LIST

${CONFIG}/tools/checkdeps || exit 1

if [ -n "${1}" ] && [ "${1}" != "image" ] && [ "${1}" != "info" ] && [ "${1}" != "next" ]; then
	# Import device settings & configuration
	. ${ROOT}/devices/options "${1}"

	if [ -z "${PKG_NAME}" ]; then
		die "$(print_color CLR_ERROR "${1}: no package.csh file found")"
	fi

	if [ -n "${PKG_ARCH}" ]; then
		listcontains "${PKG_ARCH}" "!${TARGET_ARCH}" && exit 0
		listcontains "${PKG_ARCH}" "${TARGET_ARCH}" || listcontains "${PKG_ARCH}" "any" || exit 0
	fi

	if [ "${1//:/}" != "${1}" ]; then
		TARGET="${1#*:}"
	else
		TARGET=
	fi
	TARGET="${TARGET:-target}"
	PARENT_PKG="${2:-${PKG_NAME}:${TARGET}}"

	pkg_lock "${PKG_NAME}:${TARGET}" "build" "${PARENT_PKG}"

	mkdir -p ${BUILDER_STAMPS}/${PKG_NAME}
	STAMP=${BUILDER_STAMPS}/${PKG_NAME}/build_${TARGET}
	if [ -f ${STAMP} ]; then
		. ${STAMP}
		PKG_DEEPHASH=$(calculate_stamp)

		if [ "${PKG_DEEPHASH}" = "${STAMP_PKG_DEEPHASH}" -a "${BUILD_WITH_DEBUG}" = "${STAMP_BUILD_WITH_DEBUG}" ]; then
			# stamp matched: already built, do nothing
			pkg_lock_status "UNLOCK" "${PKG_NAME}:${TARGET}" "build" "already built"
			exit 0
		fi

		rm -f ${STAMP}
	fi

	${CONFIG}/unpack "${PKG_NAME}" "${PARENT_PKG}"

	# build dependencies, only when PKG_DEPENDS_? is filled
	unset _pkg_depends
	case "${TARGET}" in
	"target")
		_pkg_depends="${PKG_DEPENDS_TARGET}"
		;;
	"host")
		_pkg_depends="${PKG_DEPENDS_HOST}"
		;;
	"init")
		_pkg_depends="${PKG_DEPENDS_INIT}"
		;;
	"bootstrap")
		_pkg_depends="${PKG_DEPENDS_BOOTSTRAP}"
		;;
	esac

	# build dependencies
	for p in ${_pkg_depends}; do
		${CONFIG}/build "${p}" "${PARENT_PKG}"
	done

	# abstract packages are not built as they only contain dependencies, so dont go further here
	if [ "${PKG_SECTION}" = "abstract" ]; then
		PKG_DEEPHASH=$(calculate_stamp)
		for i in PKG_NAME PKG_DEEPHASH BUILD_WITH_DEBUG; do
			echo "STAMP_${i}=\"${!i}\"" >>${STAMP}
		done

		pkg_lock_status "UNLOCK" "${PKG_NAME}:${TARGET}" "build" "built"
		exit 0
	fi

	# build this package
	if [ "${BUILD_WITH_DEBUG}" = "yes" ]; then
		build_msg "CLR_BUILD" "BUILD" "${PKG_NAME} $(print_color "CLR_TARGET" "(${TARGET})") [DEBUG]" "indent"
	else
		build_msg "CLR_BUILD" "BUILD" "${PKG_NAME} $(print_color "CLR_TARGET" "(${TARGET})")" "indent"
	fi

	setup_toolchain ${TARGET}

	# configure install directory
	if [ "${TARGET}" = "target" ]; then
		INSTALL="${PKG_BUILD}/.install_pkg"
	elif [ "${TARGET}" = "init" ]; then
		INSTALL="${PKG_BUILD}/.install_init"
	else
		unset INSTALL
	fi

	# remove previous install files
	if [ -n "${INSTALL}" -a -d "${INSTALL}" ]; then
		rm -rf "${INSTALL}"
	fi

	# configure debug build defaults
	if [ "${BUILD_WITH_DEBUG}" = "yes" ]; then
		CMAKE_BUILD_TYPE="Debug"
		MESON_BUILD_TYPE="debug"
	else
		CMAKE_BUILD_TYPE="MinSizeRel"
		MESON_BUILD_TYPE="plain"
	fi

	CMAKE_GENERATOR_NINJA="-GNinja \
						   -DCMAKE_EXPORT_COMPILE_COMMANDS=ON"

	# configure TARGET build defaults
	TARGET_CONFIGURE_OPTS="--host=${TARGET_NAME} \
						   --build=${HOST_NAME} \
						   --prefix=/usr \
						   --bindir=/usr/bin \
						   --sbindir=/usr/sbin \
						   --sysconfdir=/etc \
						   --libdir=/usr/lib \
						   --libexecdir=/usr/lib \
						   --localstatedir=/var \
						   --disable-static \
						   --enable-shared"

	TARGET_CMAKE_OPTS="-DCMAKE_TOOLCHAIN_FILE=${CMAKE_CONF} \
					   -DCMAKE_INSTALL_PREFIX=/usr \
					   -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}"

	TARGET_MESON_OPTS="--prefix=/usr \
					   --bindir=/usr/bin \
					   --sbindir=/usr/sbin \
					   --sysconfdir=/etc \
					   --libdir=/usr/lib \
					   --libexecdir=/usr/lib \
					   --localstatedir=/var \
					   --buildtype=${MESON_BUILD_TYPE}"

	# configure HOST build defaults
	HOST_CONFIGURE_OPTS="--host=${HOST_NAME} \
						 --build=${HOST_NAME} \
						 --prefix=${TOOLCHAIN} \
						 --bindir=${TOOLCHAIN}/bin \
						 --sbindir=${TOOLCHAIN}/sbin \
						 --sysconfdir=${TOOLCHAIN}/etc \
						 --libexecdir=${TOOLCHAIN}/lib \
						 --localstatedir=${TOOLCHAIN}/var \
						 --disable-static \
						 --enable-shared"

	HOST_CMAKE_OPTS="${CMAKE_GENERATOR} \
					 -DCMAKE_TOOLCHAIN_FILE=${CMAKE_CONF} \
					 -DCMAKE_INSTALL_PREFIX=${TOOLCHAIN}"

	HOST_MESON_OPTS="--prefix=${TOOLCHAIN} \
					 --bindir=${TOOLCHAIN}/bin \
					 --sbindir=${TOOLCHAIN}/sbin \
					 --sysconfdir=${TOOLCHAIN}/etc \
					 --libdir=${TOOLCHAIN}/lib \
					 --libexecdir=${TOOLCHAIN}/lib \
					 --localstatedir=${TOOLCHAIN}/var \
					 --buildtype=plain"

	# configure INIT build defaults
	INIT_CONFIGURE_OPTS="${TARGET_CONFIGURE_OPTS}"
	INIT_CMAKE_OPTS="${TARGET_CMAKE_OPTS}"
	INIT_MESON_OPTS="${TARGET_MESON_OPTS}"

	# configure BOOTSTRAP build defaults
	BOOTSTRAP_CONFIGURE_OPTS="${HOST_CONFIGURE_OPTS}"
	BOOTSTRAP_CMAKE_OPTS="${HOST_CMAKE_OPTS}"
	BOOTSTRAP_MESON_OPTS="${HOST_MESON_OPTS}"

	# setup configure scripts
	PKG_CONFIGURE_SCRIPT="${PKG_CONFIGURE_SCRIPT:-${PKG_BUILD}/configure}"
	PKG_CMAKE_SCRIPT="${PKG_CMAKE_SCRIPT:-${PKG_BUILD}/CMakeLists.txt}"
	PKG_MESON_SCRIPT="${PKG_MESON_SCRIPT:-${PKG_BUILD}/meson.build}"

	# auto detect toolchain
	_auto_toolchain=""
	if [ -z "${PKG_TOOLCHAIN}" -o "${PKG_TOOLCHAIN}" = "auto" ]; then
		if [ -f "${PKG_MESON_SCRIPT}" ]; then
			PKG_TOOLCHAIN="meson"
		elif [ -f "${PKG_CMAKE_SCRIPT}" ]; then
			PKG_TOOLCHAIN="cmake"
		elif [ -f "${PKG_CONFIGURE_SCRIPT}" ]; then
			PKG_TOOLCHAIN="configure"
		elif [ -f "${PKG_BUILD}/Makefile" ]; then
			PKG_TOOLCHAIN="make"
		else
			die "Not possible to detect toolchain automatically. Add PKG_TOOLCHAIN= to package.csh"
		fi
		_auto_toolchain=" (auto-detect)"
	fi
	if ! listcontains "meson cmake cmake-make configure ninja make autotools manual" "${PKG_TOOLCHAIN}"; then
		die "$(print_color "CLR_ERROR" "ERROR:") unknown toolchain ${PKG_TOOLCHAIN}"
	fi
	build_msg "CLR_TOOLCHAIN" "TOOLCHAIN" "${PKG_TOOLCHAIN}${_auto_toolchain}"

	# make autoreconf
	if [ "${PKG_TOOLCHAIN}" = "autotools" ]; then

		if [ ! -f "${PKG_BUILD}/configure.in" \
			-a ! -f "${PKG_BUILD}/configure.ac" ]; then
			die "configure.in or configure.ac not found"
		fi

		if [ ! -f "${PKG_BUILD}/.autoreconf-done" ]; then

			# lock package during autoreconf otherwise it is racy, eg. glib:host/glib:target building concurrently
			pkg_lock "${PKG_NAME}" "reconf" "${PARENT_PKG}"

			if [ ! -f "${PKG_BUILD}/.autoreconf-done" ]; then
				pkg_lock_status "ACTIVE" "${PKG_NAME}" "reconf"

				touch "${PKG_BUILD}/NEWS" "${PKG_BUILD}/AUTHORS" "${PKG_BUILD}/ChangeLog"
				mkdir -p "${PKG_BUILD}/m4"

				build_msg "CLR_AUTORECONF" "AUTORECONF" "${PKG_NAME}" "indent"

				do_autoreconf "${PKG_BUILD}"
				touch "${PKG_BUILD}/.autoreconf-done"

				pkg_lock_status "UNLOCK" "${PKG_NAME}" "reconf" "configured"
			else
				pkg_lock_status "UNLOCK" "${PKG_NAME}" "reconf" "already configured"
			fi
		fi
	fi

	pkg_lock_status "ACTIVE" "${PKG_NAME}:${TARGET}" "build"

	# include build template and build
	pkg_call_exists pre_build_${TARGET} && pkg_call pre_build_${TARGET}

	# ensure ${PKG_BUILD} is there. (installer? PKG_URL="")
	mkdir -p "${PKG_BUILD}"

	cd "${PKG_BUILD}"

	if [ -f "${PKG_CONFIGURE_SCRIPT}" -o -f "${PKG_CMAKE_SCRIPT}" -o -f "${PKG_MESON_SCRIPT}" ]; then
		case "${TARGET}" in
		"target") PKG_REAL_BUILD="${PKG_BUILD}/.${TARGET_NAME}" ;;
		"host") PKG_REAL_BUILD="${PKG_BUILD}/.${HOST_NAME}" ;;
		"init") PKG_REAL_BUILD="${PKG_BUILD}/.${TARGET_NAME}-${TARGET}" ;;
		"bootstrap") PKG_REAL_BUILD="${PKG_BUILD}/.${HOST_NAME}-${TARGET}" ;;
		esac
		mkdir -p "${PKG_REAL_BUILD}"
		cd "${PKG_REAL_BUILD}"

		MESON_CONF="${PKG_REAL_BUILD}/meson.conf"
	fi

	# configure
	pkg_call_exists pre_configure && pkg_call pre_configure
	pkg_call_exists pre_configure_${TARGET} && pkg_call pre_configure_${TARGET}

	if pkg_call_exists configure_${TARGET}; then
		pkg_call configure_${TARGET}
	else
		case "${PKG_TOOLCHAIN}:${TARGET}" in
		# meson builds
		"meson:target")
			create_meson_conf ${TARGET} ${MESON_CONF}
			echo "Executing (target): meson ${TARGET_MESON_OPTS} --cross-file=${MESON_CONF} ${PKG_MESON_OPTS_TARGET} $(dirname ${PKG_MESON_SCRIPT})" | tr -s " "
			CC="${HOST_CC}" CXX="${HOST_CXX}" meson ${TARGET_MESON_OPTS} --cross-file=${MESON_CONF} ${PKG_MESON_OPTS_TARGET} $(dirname ${PKG_MESON_SCRIPT})
			;;
		"meson:host")
			create_meson_conf ${TARGET} ${MESON_CONF}
			echo "Executing (host): meson ${HOST_MESON_OPTS} --cross-file=${MESON_CONF} ${PKG_MESON_OPTS_HOST} $(dirname ${PKG_MESON_SCRIPT})" | tr -s " "
			meson ${HOST_MESON_OPTS} --cross-file=${MESON_CONF} ${PKG_MESON_OPTS_HOST} $(dirname ${PKG_MESON_SCRIPT})
			;;
		"meson:init")
			create_meson_conf ${TARGET} ${MESON_CONF}
			echo "Executing (init): meson ${INIT_MESON_OPTS} --cross-file=${MESON_CONF} ${PKG_MESON_OPTS_INIT} $(dirname ${PKG_MESON_SCRIPT})" | tr -s " "
			meson ${INIT_MESON_OPTS} --cross-file=${MESON_CONF} ${PKG_MESON_OPTS_INIT} $(dirname ${PKG_MESON_SCRIPT})
			;;
		"meson:bootstrap")
			create_meson_conf ${TARGET} ${MESON_CONF}
			echo "Executing (bootstrap): meson ${BOOTSTRAP_MESON_OPTS} --cross-file=${MESON_CONF} ${PKG_MESON_OPTS_BOOTSTRAP} $(dirname ${PKG_MESON_SCRIPT})" | tr -s " "
			meson ${BOOTSTRAP_MESON_OPTS} --cross-file=${MESON_CONF} ${PKG_MESON_OPTS_BOOTSTRAP} $(dirname ${PKG_MESON_SCRIPT})
			;;
			# cmake builds with ninja
		"cmake:target")
			echo "Executing (target): cmake ${CMAKE_GENERATOR_NINJA} ${TARGET_CMAKE_OPTS} ${PKG_CMAKE_OPTS_TARGET} $(dirname ${PKG_CMAKE_SCRIPT})" | tr -s " "
			cmake ${CMAKE_GENERATOR_NINJA} ${TARGET_CMAKE_OPTS} ${PKG_CMAKE_OPTS_TARGET} $(dirname ${PKG_CMAKE_SCRIPT})
			;;
		"cmake:host")
			echo "Executing (host): cmake ${CMAKE_GENERATOR_NINJA} ${HOST_CMAKE_OPTS} ${PKG_CMAKE_OPTS_HOST} $(dirname ${PKG_CMAKE_SCRIPT})" | tr -s " "
			cmake ${CMAKE_GENERATOR_NINJA} ${HOST_CMAKE_OPTS} ${PKG_CMAKE_OPTS_HOST} $(dirname ${PKG_CMAKE_SCRIPT})
			;;
		"cmake:init")
			echo "Executing (init): cmake ${CMAKE_GENERATOR_NINJA} ${INIT_CMAKE_OPTS} ${PKG_CMAKE_OPTS_INIT} $(dirname ${PKG_CMAKE_SCRIPT})" | tr -s " "
			cmake ${CMAKE_GENERATOR_NINJA} ${INIT_CMAKE_OPTS} ${PKG_CMAKE_OPTS_INIT} $(dirname ${PKG_CMAKE_SCRIPT})
			;;
		"cmake:bootstrap")
			echo "Executing (bootstrap): cmake ${CMAKE_GENERATOR_NINJA} ${BOOTSTRAP_CMAKE_OPTS} ${PKG_CMAKE_OPTS_BOOTSTRAP} $(dirname ${PKG_CMAKE_SCRIPT})" | tr -s " "
			cmake ${CMAKE_GENERATOR_NINJA} ${BOOTSTRAP_CMAKE_OPTS} ${PKG_CMAKE_OPTS_BOOTSTRAP} $(dirname ${PKG_CMAKE_SCRIPT})
			;;
			# cmake builds with make
		"cmake-make:target")
			echo "Executing (target): cmake ${TARGET_CMAKE_OPTS} ${PKG_CMAKE_OPTS_TARGET} $(dirname ${PKG_CMAKE_SCRIPT})" | tr -s " "
			cmake ${TARGET_CMAKE_OPTS} ${PKG_CMAKE_OPTS_TARGET} $(dirname ${PKG_CMAKE_SCRIPT})
			;;
		"cmake-make:host")
			echo "Executing (host): cmake ${HOST_CMAKE_OPTS} ${PKG_CMAKE_OPTS_HOST} $(dirname ${PKG_CMAKE_SCRIPT})" | tr -s " "
			cmake ${HOST_CMAKE_OPTS} ${PKG_CMAKE_OPTS_HOST} $(dirname ${PKG_CMAKE_SCRIPT})
			;;
		"cmake-make:init")
			echo "Executing (init): cmake ${INIT_CMAKE_OPTS} ${PKG_CMAKE_OPTS_INIT} $(dirname ${PKG_CMAKE_SCRIPT})" | tr -s " "
			cmake ${INIT_CMAKE_OPTS} ${PKG_CMAKE_OPTS_INIT} $(dirname ${PKG_CMAKE_SCRIPT})
			;;
		"cmake-make:bootstrap")
			echo "Executing (bootstrap): cmake ${BOOTSTRAP_CMAKE_OPTS} ${PKG_CMAKE_OPTS_BOOTSTRAP} $(dirname ${PKG_CMAKE_SCRIPT})" | tr -s " "
			cmake ${BOOTSTRAP_CMAKE_OPTS} ${PKG_CMAKE_OPTS_BOOTSTRAP} $(dirname ${PKG_CMAKE_SCRIPT})
			;;
			# configure builds
		"configure:target" | "autotools:target")
			echo "Executing (target): ${PKG_CONFIGURE_SCRIPT} ${TARGET_CONFIGURE_OPTS} ${PKG_CONFIGURE_OPTS_TARGET}" | tr -s " "
			${PKG_CONFIGURE_SCRIPT} ${TARGET_CONFIGURE_OPTS} ${PKG_CONFIGURE_OPTS_TARGET}
			;;
		"configure:host" | "autotools:host")
			echo "Executing (host): ${PKG_CONFIGURE_SCRIPT} ${HOST_CONFIGURE_OPTS} ${PKG_CONFIGURE_OPTS_HOST}" | tr -s " "
			${PKG_CONFIGURE_SCRIPT} ${HOST_CONFIGURE_OPTS} ${PKG_CONFIGURE_OPTS_HOST}
			;;
		"configure:init" | "autotools:init")
			echo "Executing (init): ${PKG_CONFIGURE_SCRIPT} ${INIT_CONFIGURE_OPTS} ${PKG_CONFIGURE_OPTS_INIT}" | tr -s " "
			${PKG_CONFIGURE_SCRIPT} ${INIT_CONFIGURE_OPTS} ${PKG_CONFIGURE_OPTS_INIT}
			;;
		"configure:bootstrap" | "autotools:bootstrap")
			echo "Executing (bootstrap): ${PKG_CONFIGURE_SCRIPT} ${BOOTSTRAP_CONFIGURE_OPTS} ${PKG_CONFIGURE_OPTS_BOOTSTRAP}" | tr -s " "
			${PKG_CONFIGURE_SCRIPT} ${BOOTSTRAP_CONFIGURE_OPTS} ${PKG_CONFIGURE_OPTS_BOOTSTRAP}
			;;
		esac
	fi

	pkg_call_exists post_configure_${TARGET} && pkg_call post_configure_${TARGET}

	# make
	pkg_call_exists pre_make_${TARGET} && pkg_call pre_make_${TARGET}

	if pkg_call_exists make_${TARGET}; then
		pkg_call make_${TARGET}
	else
		case "${PKG_TOOLCHAIN}:${TARGET}" in
		# ninja based builds
		"meson:target" | "cmake:target" | "ninja:target")
			echo "Executing (target): ninja ${PKG_MAKE_OPTS_TARGET}" | tr -s " "
			ninja ${NINJA_OPTS} ${PKG_MAKE_OPTS_TARGET}
			;;
		"meson:host" | "cmake:host" | "ninja:host")
			echo "Executing (host): ninja ${PKG_MAKE_OPTS_HOST}" | tr -s " "
			ninja ${NINJA_OPTS} ${PKG_MAKE_OPTS_HOST}
			;;
		"meson:init" | "cmake:init" | "ninja:init")
			echo "Executing (init): ninja ${PKG_MAKE_OPTS_INIT}" | tr -s " "
			ninja ${NINJA_OPTS} ${PKG_MAKE_OPTS_INIT}
			;;
		"meson:bootstrap" | "cmake:bootstrap" | "ninja:bootstrap")
			echo "Executing (bootstrap): ninja ${PKG_MAKE_OPTS_BOOTSTRAP}" | tr -s " "
			ninja ${NINJA_OPTS} ${PKG_MAKE_OPTS_BOOTSTRAP}
			;;
			# make based builds
		"configure:target" | "cmake-make:target" | "autotools:target" | "make:target")
			echo "Executing (target): make ${PKG_MAKE_OPTS_TARGET}" | tr -s " "
			make ${PKG_MAKE_OPTS_TARGET}
			;;
		"configure:host" | "cmake-make:host" | "autotools:host" | "make:host")
			echo "Executing (host): make ${PKG_MAKE_OPTS_HOST}" | tr -s " "
			make ${PKG_MAKE_OPTS_HOST}
			;;
		"configure:init" | "cmake-make:init" | "autotools:init" | "make:init")
			echo "Executing (init): make ${PKG_MAKE_OPTS_INIT}" | tr -s " "
			make ${PKG_MAKE_OPTS_INIT}
			;;
		"configure:bootstrap" | "cmake-make:bootstrap" | "autotools:bootstrap" | "make:bootstrap")
			echo "Executing (bootstrap): make ${PKG_MAKE_OPTS_BOOTSTRAP}" | tr -s " "
			make ${PKG_MAKE_OPTS_BOOTSTRAP}
			;;
		esac
	fi

	pkg_call_exists post_make_${TARGET} && pkg_call post_make_${TARGET}

	# Hack around directly writing/modifying the content of a shared sysroot
	# by temporarily installing new files to a package specific sysroot
	PKG_ORIG_SYSROOT_PREFIX="${TARGET_SYSROOT}"
	export TARGET_SYSROOT="${BUILDER}/.sysroot/${PKG_NAME}.${TARGET}"
	rm -rf "${TARGET_SYSROOT}"

	# Create common sysroot directories as some packages expect them to exist.
	# TODO: Fix those packages so we don't need to pre-create directories.
	for d in /usr/lib /usr/include /usr/bin /usr/lib/pkgconfig; do
		mkdir -p "${TARGET_SYSROOT}${d}"
	done

	# make install
	pkg_call_exists pre_makeinstall_${TARGET} && pkg_call pre_makeinstall_${TARGET}

	if pkg_call_exists makeinstall_${TARGET}; then
		pkg_call makeinstall_${TARGET}
	else
		case "${PKG_TOOLCHAIN}:${TARGET}" in
		# ninja based builds
		"meson:target" | "cmake:target")
			DESTDIR=${TARGET_SYSROOT} ninja install ${PKG_MAKEINSTALL_OPTS_TARGET}
			DESTDIR=${INSTALL} ninja install ${PKG_MAKEINSTALL_OPTS_TARGET}
			;;
		"meson:host" | "cmake:host")
			ninja install ${PKG_MAKEINSTALL_OPTS_HOST}
			;;
		"meson:init" | "cmake:init")
			DESTDIR=${INSTALL} ninja install ${PKG_MAKEINSTALL_OPTS_INIT}
			;;
		"meson:bootstrap" | "cmake:bootstrap")
			ninja install ${PKG_MAKEINSTALL_OPTS_BOOTSTRAP}
			;;
			# make based builds
		"configure:target" | "cmake-make:target" | "autotools:target" | "make:target")
			make install DESTDIR=${TARGET_SYSROOT} -j1 ${PKG_MAKEINSTALL_OPTS_TARGET}
			make install DESTDIR=${INSTALL} ${PKG_MAKEINSTALL_OPTS_TARGET}
			;;
		"configure:host" | "cmake-make:host" | "autotools:host" | "make:host")
			make install ${PKG_MAKEINSTALL_OPTS_HOST}
			;;
		"configure:init" | "cmake-make:init" | "autotools:init" | "make:init")
			make install DESTDIR=${INSTALL} ${PKG_MAKEINSTALL_OPTS_INIT}
			;;
		"configure:bootstrap" | "cmake-make:bootstrap" | "autotools:bootstrap" | "make:bootstrap")
			make install ${PKG_MAKEINSTALL_OPTS_BOOTSTRAP}
			;;
		esac
	fi

	pkg_call_exists post_makeinstall_${TARGET} && pkg_call post_makeinstall_${TARGET}

	# Fixup temporary sysroot references to the shared sysroot
	for i in $(find "${TARGET_SYSROOT}/usr/lib" -type f -name "*.la" 2>/dev/null); do
		sed -e "s:\(['= ]\)/usr:\\1${PKG_ORIG_SYSROOT_PREFIX}/usr:g" -i "${i}"
	done
	for i in $(find "${TARGET_SYSROOT}/usr/bin" -type f -name "*-config" 2>/dev/null); do
		sed -e "s#${TARGET_SYSROOT}/usr#${PKG_ORIG_SYSROOT_PREFIX}/usr#g" -i "${i}"
	done
	for i in $(find "${TARGET_SYSROOT}/usr/lib" -type f -name "*.pc" 2>/dev/null); do
		sed -e "s#${TARGET_SYSROOT}/usr#${PKG_ORIG_SYSROOT_PREFIX}/usr#g" -i "${i}"
	done
	for i in $(find "${TARGET_SYSROOT}/usr"/{lib,share} -type f -name "*.cmake" 2>/dev/null); do
		sed -e "s#${TARGET_SYSROOT}/usr#${PKG_ORIG_SYSROOT_PREFIX}/usr#g" -i "${i}"
	done
	for i in $(find "${TARGET_SYSROOT}" -type l 2>/dev/null); do
		_tmp="$(readlink -m "${i}")"
		[[ ${_tmp} =~ ^/usr ]] && _tmp="${TARGET_SYSROOT}${_tmp}"
		if [[ ${_tmp} =~ ^${TARGET_SYSROOT}/ ]]; then
			ln -sfn "${_tmp/${TARGET_SYSROOT}\//${PKG_ORIG_SYSROOT_PREFIX}\/}" "${i}"
		fi
	done

	# Transfer the new sysroot content to the shared sysroot
	mkdir -p "${PKG_ORIG_SYSROOT_PREFIX}"
	cp -PRf "${TARGET_SYSROOT}"/* "${PKG_ORIG_SYSROOT_PREFIX}"
	rm -rf "${TARGET_SYSROOT}"

	export TARGET_SYSROOT="${PKG_ORIG_SYSROOT_PREFIX}"

	if [ "${TARGET}" = "target" -o "${TARGET}" = "init" ]; then
		if [ -d ${INSTALL} ]; then
			rm -rf ${INSTALL}/{usr/,}include
			rm -rf ${INSTALL}/{usr/,}lib/cmake
			rm -rf ${INSTALL}/{usr/,}lib/pkgconfig
			rm -rf ${INSTALL}/{usr/,}man
			rm -rf ${INSTALL}/{usr/,}share/aclocal
			rm -rf ${INSTALL}/{usr/,}share/bash-completion
			rm -rf ${INSTALL}/{usr/,}share/doc
			rm -rf ${INSTALL}/{usr/,}share/gtk-doc
			rm -rf ${INSTALL}/{usr/,}share/info
			rm -rf ${INSTALL}/{usr/,}share/locale
			rm -rf ${INSTALL}/{usr/,}share/man
			rm -rf ${INSTALL}/{usr/,}share/pkgconfig
			rm -rf ${INSTALL}/{usr/,}share/zsh
			rm -rf ${INSTALL}/{usr/,}var
			find ${INSTALL} \( -name "*.orig" \
				-o -name "*.rej" \
				-o -name "*.a" \
				-o -name "*.la" \
				-o -name "*.o" \
				-o -name "*.in" \
				-o -name ".git*" \) \
				-exec rm -f {} \; 2>/dev/null || :
			find ${INSTALL} -type d -exec rmdir -p {} \; 2>/dev/null || :

			if [ ! "${BUILD_WITH_DEBUG}" = "yes" ]; then
				${STRIP} $(find ${INSTALL} \
					-type f -name "*.so*" \
					! -name "ld-*.so" \
					! -name "libc-*.so" \
					! -name "libpthread-*.so" \
					! -name "libthread_db-*so" \
					2>/dev/null) 2>/dev/null || :
				if [ "${TARGET}" = "init" ]; then
					${STRIP} $(find ${INSTALL} -type f -name "*.so*" 2>/dev/null) 2>/dev/null || :
				fi
				${STRIP} $(find ${INSTALL} ! -name "*.so*" ! -name "*.ko" \
					-type f -executable 2>/dev/null) 2>/dev/null || :
			fi
		fi
	fi

	cd ${ROOT}

	PKG_DEEPHASH=$(calculate_stamp)
	for i in PKG_NAME PKG_DEEPHASH BUILD_WITH_DEBUG; do
		echo "STAMP_${i}=\"${!i}\"" >>${STAMP}
	done

	pkg_lock_status "UNLOCK" "${PKG_NAME}:${TARGET}" "build" "built"
elif [ -z "${1}" ] || [ "${1}" = "image" ]; then
	# Import device settings & configuration
	. ${ROOT}/devices/options ""

	# Setup both toolchain cmake configs to avoid potentially racy behaviour later.
	# Use a fork for host to isolate any variable modifications.
	echo -e "\n\n> Build process started.."
	(setup_toolchain host)
	setup_toolchain target

	# Collect versioning details
	echo -e ">> Reading versioning details.."
	GIT_HASH=$(git rev-parse HEAD)
	GIT_ABBREV=${GIT_HASH:0:7}
	case "${DISTRO_STATUS}" in
	nightly)
		DISTRO_CODE=${DISTRO_STATUS}-$(date +%Y%m%d)-${GIT_ABBREV}
		DISTRO_LABEL="(${DISTRO_CODE})"
		;;
	daily)
		DISTRO_CODE=${DISTRO_STATUS}-$(date +%Y%j)-${GIT_ABBREV}
		DISTRO_LABEL="(${DISTRO_CODE})"
		;;
	weekly)
		DISTRO_CODE=${DISTRO_STATUS}-$(date +%G%V)-${GIT_ABBREV}
		DISTRO_LABEL="(${DISTRO_CODE})"
		;;
	monthly)
		DISTRO_CODE=${DISTRO_STATUS}-$(date +%Y%m)-${GIT_ABBREV}
		DISTRO_LABEL="(${DISTRO_CODE})"
		;;
	devel)
		DISTRO_CODE=${DISTRO_STATUS}-$(date +%Y%m%d%H%M%S)-${GIT_ABBREV}
		DISTRO_LABEL="(${DISTRO_CODE})"
		;;
	stable)
		DISTRO_CODE=${DISTRO_STATUS}-${GIT_ABBREV}
		DISTRO_LABEL="(${DISTRO_CODE})"
		;;
	*)
		DISTRO_CODE=${DISTRO_STATUS}
		DISTRO_LABEL="${DISTRO_CODE}"
		;;
	esac

	TARGET_VERSION="${DEVICE}.${TARGET_ARCH}-${DISTRO_CODE}"
	IMAGE_NAME="${DISTRO_NAME}-${DISTRO_VERSION}-${TARGET_VERSION}"
	set_var "distrocode" "${DISTRO_CODE}"
	set_var "imagename" "${IMAGE_NAME}"

	# Setup fakeroot
	echo ">> Defining fake root.."
	rm -rf ${FAKEROOT_SCRIPT}   # remove ${FAKEROOT_SCRIPT} if it exist
	touch ${FAKEROOT_SCRIPT}    # create an empty ${FAKEROOT_SCRIPT}
	chmod +x ${FAKEROOT_SCRIPT} # make ${FAKEROOT_SCRIPT} executable
	echo "chown -R 0:0 ${INSTALL}" >>${FAKEROOT_SCRIPT}

	# Clean old install dirs
	rm -rf ${INSTALL}
	rm -rf ${INSTALL_STAMPS}
	mkdir -p ${INSTALL}

	# Create base layout of Clue read-only file system
	echo ">> Creating base layout of read-only file system.."
	for directory in etc dev proc run sys tmp usr var boot home; do
		mkdir -p ${INSTALL}/${directory}
	done

	# Build image contents
	echo ">> Building system packages.."
	start_multithread_build system || die "Parallel build failure - see log for details. Time of failure: $(date)"

	echo -e "<< Successful build, finalizing OS structure and components..\n"

	# Create legacy sym links
	echo ">> Creating legacy sym links.."
	ln -sfn /var/media ${INSTALL}/media
	ln -sfn /usr/lib ${INSTALL}/lib
	ln -sfn /usr/bin ${INSTALL}/bin
	ln -sfn /usr/sbin ${INSTALL}/sbin

	echo "${TARGET_VERSION}" >${INSTALL}/etc/release

	# Create /etc/os-release
	echo ">> Creating /etc/os-release.."
	cat <<EOF >${INSTALL}/etc/os-release
NAME="${DISTRO_NAME}"
VERSION="${DISTRO_VERSION} ${DISTRO_LABEL}"
ID="clue"
ID_LIKE="libreelec"
PRETTY_NAME="${DISTRO_LONGNAME} ${DISTRO_VERSION} ${DISTRO_LABEL}"
VERSION_ID="${DISTRO_VERSION}"
VERSION_CODE="${DISTRO_CODE}"
HOME_URL="https://amsd.go.ro/clue"
BUILD_ID="${GIT_HASH}"
DEVICE="${DEVICE}"
ARCH="${TARGET_ARCH}"
EOF

	# Create /etc/issue
	echo ">> Creating /etc/issue.."
	cat <<EOF >${INSTALL}/etc/issue
Welcome to ..
			  *****       **          **   **      ******
			**           **          **   **      **
		   **           **          **   **      ****
		  **           **          **   **      **
		  *****       ******      *******      ******    OS.!

This is an open OS that comes with ABSOLUTELY NO WARRANTY!

EOF

	ln -sf /etc/issue ${INSTALL}/etc/motd

	# Copy system related files to filesystem
	echo ">> Copying system related files to filesystem.."
	if [ -d "${ROOT}/basis/filesystem" ]; then
		cp -PR ${ROOT}/basis/filesystem/* ${INSTALL}
		# Install project specific systemd services
		for service in ${ROOT}/basis/filesystem/usr/lib/systemd/system/*.service; do
			if [ -f "${service}" ]; then
				enable_service $(basename ${service})
			fi
		done
	fi

	# Copy DEVICE related files to filesystem
	echo ">> Copying DEVICE related files to filesystem.."
	if [ -n "${DEVICE}" -a -d "${ROOT}/devices/${DEVICE}/filesystem" ]; then
		cp -PR ${ROOT}/devices/${DEVICE}/filesystem/* ${INSTALL}
		# Install device specific systemd services
		for service in ${ROOT}/devices/${DEVICE}/filesystem/usr/lib/systemd/system/*.service; do
			if [ -f "${service}" ]; then
				enable_service $(basename ${service})
			fi
		done
	fi

	# Run depmod for base overlay modules
	echo ">> Running depmod for base overlay modules.."
	MODVER=$(basename $(ls -d ${INSTALL}/usr/lib/kernel-overlays/base/lib/modules/*))
	find ${INSTALL}/usr/lib/kernel-overlays/base/lib/modules/${MODVER}/ -name *.ko |
		sed -e "s,${INSTALL}/usr/lib/kernel-overlays/base/lib/modules/${MODVER}/,," \
			>${INSTALL}/usr/lib/kernel-overlays/base/lib/modules/${MODVER}/modules.order
	${TOOLCHAIN}/bin/depmod -b ${INSTALL}/usr/lib/kernel-overlays/base -a -e -F "${BUILDER_PACKS}/linux-$(kernel_version)/System.map" ${MODVER} 2>&1

	# Strip kernel modules
	echo ">> Striping kernel modules.."
	for MOD in $(find ${INSTALL}/usr/lib/kernel-overlays/ -type f -name *.ko); do
		${TARGET_KERNEL_PREFIX}strip --strip-debug ${MOD}
	done

	# Symlink overlayed modules to /usr/lib/modules
	echo ">> Symlinking overlayed modules to /usr/lib/modules.."
	ln -sT /var/lib/modules ${INSTALL}/usr/lib/modules

	# Symlink overlayed firmware to /usr/lib/firmware
	echo ">> Symlinking overlayed firmware to /usr/lib/firmware.."
	ln -sT /var/lib/firmware ${INSTALL}/usr/lib/firmware

	# Make target dir
	echo ">> Creating target folder.."
	mkdir -p ${TARGETS}
	rm -rf ${TARGETS}/${IMAGE_NAME}.kernel

	# Copy kernel to target dir
	echo ">> Copying kernel to target folder.."
	cp -PR ${BUILDER_PACKS}/linux-$(kernel_version)/arch/${TARGET_KERNEL_ARCH}/boot/${KERNEL_TARGET} ${TARGETS}/${IMAGE_NAME}.kernel
	chmod 0644 ${TARGETS}/${IMAGE_NAME}.kernel

	# Set mksquashfs options for each compression method
	echo ">> Setting mksquashfs options for each compression method.."
	if [ -z "${SQUASHFS_COMPRESSION_OPTION}" ]; then
		if [ "${SQUASHFS_COMPRESSION:-gzip}" = "gzip" ]; then
			SQUASHFS_COMPRESSION_OPTION="-Xcompression-level 9 -b 262144"
		elif [ "${SQUASHFS_COMPRESSION}" = "lzo" ]; then
			SQUASHFS_COMPRESSION_OPTION="-Xcompression-level 9 -b 524288"
		elif [ "${SQUASHFS_COMPRESSION}" = "zstd" ]; then
			SQUASHFS_COMPRESSION_OPTION="-Xcompression-level 22 -b 262144"
		fi
	fi

	# Create squashfs file, default to gzip if no compression configured
	echo ">> Creating squashfs file, default to gzip if no compression configured.."
	echo "rm -rf \"${TARGETS}/${IMAGE_NAME}.system\"" >>${FAKEROOT_SCRIPT}
	echo "${TOOLCHAIN}/bin/mksquashfs \"${BUILDER}/image/system\" \"${TARGETS}/${IMAGE_NAME}.system\" -noappend -comp ${SQUASHFS_COMPRESSION:-gzip} ${SQUASHFS_COMPRESSION_OPTION}" >>${FAKEROOT_SCRIPT}

	# Run fakeroot
	echo ">> Running fakeroot.."
	${TOOLCHAIN}/bin/fakeroot -- ${FAKEROOT_SCRIPT}
	rm -rf ${FAKEROOT_SCRIPT}

	# Set permissions
	echo -e ">> Setting up permissions..\n"
	chmod 0644 ${TARGETS}/${IMAGE_NAME}.system

	# Make OS image
	if [ "${1}" = "image" ]; then
		echo -e "\n> Making OS release.."
		RELEASE_DIR="${TARGETS}/${IMAGE_NAME}"

		# Cleanup
		rm -rf ${RELEASE_DIR}
		# Remove any previously created release images
		rm -rf ${TARGETS}/${IMAGE_NAME}.img.gz
		# Remove any previously created release tarballs
		rm -rf ${TARGETS}/${IMAGE_NAME}.tar

		# Create release dir
		echo -e "\tCreating release and bootloader resources.."
		mkdir -p ${RELEASE_DIR}

		# Deploy bootloaded resources
		BOOTLOADER_DIR="$(get_pkg_directory "bcm2835-bootloader")"
		if [ -d ${BOOTLOADER_DIR}/files ]; then
			echo -e "\t\tDeploy bootloaded resources from ${BOOTLOADER_DIR}"
			cp -R ${BOOTLOADER_DIR}/files/* ${RELEASE_DIR}
			mkdir -p ${RELEASE_DIR}/3rdparty/bootloader
			cp -PR ${INSTALL}/usr/share/bootloader/LICENCE* ${RELEASE_DIR}/3rdparty/bootloader/
			cp -PR ${INSTALL}/usr/share/bootloader/bootcode.bin ${RELEASE_DIR}/3rdparty/bootloader/
			cp -PR ${INSTALL}/usr/share/bootloader/fixup.dat ${RELEASE_DIR}/3rdparty/bootloader/
			cp -PR ${INSTALL}/usr/share/bootloader/start.elf ${RELEASE_DIR}/3rdparty/bootloader/
			if [ -f $(get_build_dir slice-firmware)/dt-blob.bin ]; then
				cp -PR $(get_build_dir slice-firmware)/dt-blob.bin ${RELEASE_DIR}/3rdparty/bootloader/
			fi
			cp -PR ${INSTALL}/usr/share/bootloader/*.dtb ${RELEASE_DIR}/3rdparty/bootloader/
			cp -PR ${INSTALL}/usr/share/bootloader/overlays ${RELEASE_DIR}/3rdparty/bootloader/
			if [ -f ${INSTALL}/usr/share/bootloader/config.txt ]; then
				cp -PR ${INSTALL}/usr/share/bootloader/config.txt ${RELEASE_DIR}/3rdparty/bootloader/
			fi
			if [ -f ${INSTALL}/usr/share/bootloader/distroconfig.txt ]; then
				cp -PR ${INSTALL}/usr/share/bootloader/distroconfig.txt ${RELEASE_DIR}/3rdparty/bootloader/
			fi
		fi

		cp ${ROOT}/README* ${RELEASE_DIR}
		echo "${TARGET_VERSION}" >${RELEASE_DIR}/RELEASE

		echo -e "\t\tKodi commit: $(get_pkg_version kodi)" >>${RELEASE_DIR}/RELEASE

		mkdir -p ${RELEASE_DIR}/target
		cp ${TARGETS}/${IMAGE_NAME}.system ${RELEASE_DIR}/target/SYSTEM
		cp ${TARGETS}/${IMAGE_NAME}.kernel ${RELEASE_DIR}/target/KERNEL

		(# Create md5sum's
			cd ${RELEASE_DIR}
			md5sum -t target/SYSTEM >target/SYSTEM.md5
			md5sum -t target/KERNEL >target/KERNEL.md5
		)

		# Create release tarball
		echo -e "\tCreating release tarball.."
		tar cf ${TARGETS}/${IMAGE_NAME}.tar -C ${TARGETS} ${IMAGE_NAME} || die "An error has occurred creating release tarball: $(echo '${TARGETS}/${IMAGE_NAME}.tar, over location ${TARGETS} for directory ${IMAGE_NAME}')"

		(# Create sha256 checksum of tarball
			cd ${TARGETS}
			sha256sum ${IMAGE_NAME}.tar >${IMAGE_NAME}.tar.sha256
		)

		echo -e "\n> Making OS image.."
		UUID_SYSTEM="$(date '+%d%m')-$(date '+%M%S')"
		UUID_STORAGE="$(uuidgen)"

		# set temp variables
		LE_TMP=/tmp/.clueimg
		SAVE_ERROR="${LE_TMP}/save_error"
		rm -rf ${LE_TMP}
		mkdir -p ${LE_TMP}

		if [ -z "${SYSTEM_SIZE}" -o -z "${SYSTEM_PART_START}" ]; then
			die "SYSTEM_SIZE and SYSTEM_PART_START must be configured!"
		fi

		DISK_LABEL=msdos
		STORAGE_SIZE=32 # STORAGE_SIZE must be >= 32 !
		DISK_START_PADDING=$(((${SYSTEM_PART_START} + 2048 - 1) / 2048))
		DISK_GPT_PADDING=1
		DISK_SIZE=$((${DISK_START_PADDING} + ${SYSTEM_SIZE} + ${STORAGE_SIZE} + ${DISK_GPT_PADDING}))
		DISK_BASENAME="${TARGETS}/${IMAGE_NAME}"
		DISK="${DISK_BASENAME}.img"

		trap cleanup SIGINT

		# create an image
		echo -e "\tCreating file $(basename ${DISK})..."
		dd if=/dev/zero of="${DISK}" bs=1M count="${DISK_SIZE}" conv=fsync >"${SAVE_ERROR}" 2>&1 || die "An error has occurred creating image: $(cat ${SAVE_ERROR})"

		# write a disklabel
		echo -e "\tCreating ${DISK_LABEL} partition table.."
		parted -s "${DISK}" mklabel ${DISK_LABEL}
		sync

		# create part1
		echo -e "\tCreating part1.."
		SYSTEM_PART_END=$((${SYSTEM_PART_START} + (${SYSTEM_SIZE} * 1024 * 1024 / 512) - 1))
		parted -s "${DISK}" -a min unit s mkpart primary fat32 ${SYSTEM_PART_START} ${SYSTEM_PART_END}
		parted -s "${DISK}" set 1 boot on
		sync

		# create part2
		echo -e "\tCreating part2.."
		STORAGE_PART_START=$((${SYSTEM_PART_END} + 1))
		STORAGE_PART_END=$((${STORAGE_PART_START} + (${STORAGE_SIZE} * 1024 * 1024 / 512) - 1))
		parted -s "${DISK}" -a min unit s mkpart primary ext4 ${STORAGE_PART_START} ${STORAGE_PART_END}
		sync

		# create filesystem on part1
		echo -e "\tCreating filesystem on part1.."
		OFFSET=$((${SYSTEM_PART_START} * 512))
		HEADS=4
		TRACKS=32
		SECTORS=$((${SYSTEM_SIZE} * 1024 * 1024 / 512 / ${HEADS} / ${TRACKS}))

		mformat -i ${DISK}@@${OFFSET} -h ${HEADS} -t ${TRACKS} -s ${SECTORS} -v "${DISTRO_BOOTLABEL}" -N "${UUID_SYSTEM//-/}" ::
		sync

		# create bootloader configuration
		echo -e "\tCreating bootloader configuration.."
		cat <<EOF >"${LE_TMP}/cmdline.txt"
boot=UUID=${UUID_SYSTEM} disk=UUID=${UUID_STORAGE} quiet ${EXTRA_CMDLINE}
EOF

		mcopy -i ${DISK}@@${OFFSET} "${LE_TMP}/cmdline.txt" ::

		# copy files
		echo -e "\tCopying files to part1.."
		mcopy -i ${DISK}@@${OFFSET} "${TARGETS}/${IMAGE_NAME}.kernel" "::/${KERNEL_NAME}"
		mcopy -i ${DISK}@@${OFFSET} "${TARGETS}/${IMAGE_NAME}.system" ::/SYSTEM
		mcopy -i ${DISK}@@${OFFSET} "${RELEASE_DIR}/target/KERNEL.md5" "::/${KERNEL_NAME}.md5"
		mcopy -i ${DISK}@@${OFFSET} "${RELEASE_DIR}/target/SYSTEM.md5" ::/SYSTEM.md5

		mcopy -i ${DISK}@@${OFFSET} "${RELEASE_DIR}/3rdparty/bootloader/bootcode.bin" ::
		mcopy -i ${DISK}@@${OFFSET} "${RELEASE_DIR}/3rdparty/bootloader/fixup.dat" ::
		mcopy -i ${DISK}@@${OFFSET} "${RELEASE_DIR}/3rdparty/bootloader/start.elf" ::
		mcopy -i ${DISK}@@${OFFSET} "${RELEASE_DIR}/3rdparty/bootloader/config.txt" ::
		mcopy -i ${DISK}@@${OFFSET} "${RELEASE_DIR}/3rdparty/bootloader/distroconfig.txt" ::

		if [ -f "${RELEASE_DIR}/3rdparty/bootloader/dt-blob.bin" ]; then
			mcopy -i ${DISK}@@${OFFSET} "${RELEASE_DIR}/3rdparty/bootloader/dt-blob.bin" ::
		fi

		for dtb in "${RELEASE_DIR}/3rdparty/bootloader/"*.dtb; do
			if [ -f "${dtb}" ]; then
				mcopy -i ${DISK}@@${OFFSET} "${dtb}" ::/$(basename "${dtb}")
			fi
		done

		if [ -d "${RELEASE_DIR}/3rdparty/bootloader/overlays" ]; then
			mcopy -i ${DISK}@@${OFFSET} -s "${RELEASE_DIR}/3rdparty/bootloader/overlays" ::
		fi

		# extract part2 from image to format and copy files
		echo -e "\tExtracting part2 from image.."
		STORAGE_PART_COUNT=$((${STORAGE_PART_END} - ${STORAGE_PART_START} + 1))
		sync
		dd if="${DISK}" of="${LE_TMP}/part2.ext4" bs=512 skip="${STORAGE_PART_START}" count="${STORAGE_PART_COUNT}" conv=fsync >"${SAVE_ERROR}" 2>&1 || die "An error has occurred creating image: $(cat ${SAVE_ERROR})"

		# create filesystem on part2
		echo -e "\tCreating filesystem on part2.."
		mke2fs -F -q -t ext4 -m 0 "${LE_TMP}/part2.ext4"
		tune2fs -L "${DISTRO_DISKLABEL}" -U ${UUID_STORAGE} "${LE_TMP}/part2.ext4" >"${SAVE_ERROR}" 2>&1 || die "An error has occurred creating image: $(cat ${SAVE_ERROR})"
		e2fsck -n "${LE_TMP}/part2.ext4" >"${SAVE_ERROR}" 2>&1 || die "An error has occurred creating image: $(cat ${SAVE_ERROR})"
		sync

		# add resize mark
		mkdir "${LE_TMP}/part2.fs"
		touch "${LE_TMP}/part2.fs/.please_resize_me"
		echo -e "\tPopulating filesystem on part2.."
		populatefs -U -d "${LE_TMP}/part2.fs" "${LE_TMP}/part2.ext4" >"${SAVE_ERROR}" 2>&1 || die "An error has occurred creating image: $(cat ${SAVE_ERROR})"
		sync
		e2fsck -n "${LE_TMP}/part2.ext4" >"${SAVE_ERROR}" 2>&1 || die "An error has occurred creating image: $(cat ${SAVE_ERROR})"

		# merge part2 back to disk image
		echo -e "\tMerging part2 back to image.."
		dd if="${LE_TMP}/part2.ext4" of="${DISK}" bs=512 seek="${STORAGE_PART_START}" conv=fsync,notrunc >"${SAVE_ERROR}" 2>&1 || die "An error has occurred creating image: $(cat ${SAVE_ERROR})"

		# extract part1 from image to run fsck
		echo -e "\tExtracting part1 from image.."
		SYSTEM_PART_COUNT=$((${SYSTEM_PART_END} - ${SYSTEM_PART_START} + 1))
		sync
		dd if="${DISK}" of="${LE_TMP}/part1.fat" bs=512 skip="${SYSTEM_PART_START}" count="${SYSTEM_PART_COUNT}" conv=fsync >"${SAVE_ERROR}" 2>&1 || die "An error has occurred creating image: $(cat ${SAVE_ERROR})"
		echo -e "\tChecking filesystem on part1.."
		fsck.fat -n "${LE_TMP}/part1.fat" >"${SAVE_ERROR}" 2>&1 || die "An error has occurred creating image: $(cat ${SAVE_ERROR})"

		# gzip
		echo -e "\tCompressing.."
		pigz --best --force "${DISK}"

		# set owner
		if [ -n "${SUDO_USER}" ]; then
			chown "${SUDO_USER}:" "${DISK}.gz"
		fi

		# create sha256 checksum of image
		cd "${TARGETS}"
		sha256sum $(basename "${DISK}").gz >$(basename "${DISK}").gz.sha256

		# cleanup
		echo -e "\tCleaning up.."
		rm -rf "${LE_TMP}"

		# Cleanup release dir
		rm -rf ${RELEASE_DIR}
	fi

	# process ended
	echo -e "> Process ended..\n"

elif [ "${1}" = "info" ]; then
	# Import device settings & configuration
	. ${ROOT}/devices/options ""

	# Display build configuration details
	show_config ${2}

elif [ "${1}" = "next" ]; then
	# Import device settings & configuration
	svn update --quiet --force ${ROOT}/devices/options
	. ${ROOT}/devices/options ""

	# Setup for the next build
	set_build

	# Initialize transferable variables defined by options and configurations
	set_vars
fi

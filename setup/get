#!/bin/bash

. ${ROOT}/devices/options "${1}"

if [ -z "${1}" ]; then
	for i in $(find "${PACKAGES}/" -type f -name "package.csh"); do
		GET_PKG=$(grep "^PKG_NAME=" "${i}" | sed -e "s,\",,g" -e "s,PKG_NAME=,,")
		"${CONFIG}"/get "${GET_PKG}"
	done
fi

# Avoid concurrent processing of the same package
lock_source_dir() {
	exec 99<"${SOURCES}/${1}"
	if ! flock --nonblock --exclusive 99; then
		echo "Device ${DEVICE} is waiting, to avoid concurrent processing of ${1}..."
		flock --exclusive 99
	fi
}

_get_repo_already_downloaded() {
	if [ -d "${PACKAGE}" ]; then
		(
			cd "${PACKAGE}"
			_get_repo_clean
			[ -n "$(git ls-remote . | grep -m1 HEAD | awk "/^${PKG_VERSION}/ {print \$1;}")" ] || die "ERROR: ${PACKAGE}: failed to determine git HEAD"
			[ "${PKG_URL}" = "$(git remote get-url origin)" ] || die "ERROR: ${PACKAGE}: failed to obtain URL of origin"
			[ -z "${PKG_GIT_CLONE_BRANCH}" ] && exit 0
			[ "${PKG_GIT_CLONE_BRANCH}" = "$(git branch | grep ^\* | cut -d ' ' -f2)" ] || die "ERROR: ${PACKAGE}: failed to determine current git branch"
			exit 0
		)
		return
	else
		return 1
	fi
}

_get_repo_clean() {
	git clean -fdx
	git checkout -- .
}

# Handler for git
# Usage (in package.csh):
# PKG_URL (mandatory) must point to a git repository (git://... or https://example.com/repo.git)
# PKG_VERSION (mandatory) must point to a commit SHA, e.g. a1b2c3d
# PKG_GIT_SHA (optional) full hash of git commit
# PKG_GIT_CLONE_BRANCH (optional) clone specific branch
# PKG_GIT_CLONE_SINGLE (optional) clone single branch only (set to yes)
# PKG_GIT_CLONE_DEPTH (optional) history to clone, must be a number
# PKG_GIT_SUBMODULE_DEPTH (optional) history of submodules to clone, must be a number
_get_git() {
	# Latest file already present, exit now...
	_get_repo_already_downloaded && exit 0

	lock_source_dir "${1}"

	# Check again in case of concurrent access - if nothing needs to be downloaded, exit now...
	_get_repo_already_downloaded && exit 0

	# At this point, we need to download something...
	build_msg "CLR_GET" "GET" "${1} (git)" "indent"

	pkg_lock_status "GETPKG" "${PKG_NAME}" "unpack" "processing package repository..."

	rm -f "${STAMP_URL}" "${STAMP_SHA}"

	GIT_CLONE_PARAMS=""
	GIT_SUBMODULE_PARAMS=""

	[ -n "${PKG_GIT_CLONE_BRANCH}" ] && GIT_CLONE_PARAMS="${GIT_CLONE_PARAMS} --branch ${PKG_GIT_CLONE_BRANCH}"
	[ "${PKG_GIT_CLONE_SINGLE}" = "yes" ] && GIT_CLONE_PARAMS="${GIT_CLONE_PARAMS} --single-branch"

	if [ -n "${PKG_GIT_CLONE_DEPTH}" ]; then
		if [[ "${PKG_GIT_CLONE_DEPTH}" =~ ^[0-9]+$ ]]; then
			GIT_CLONE_PARAMS="${GIT_CLONE_PARAMS} --depth ${PKG_GIT_CLONE_DEPTH}"
		else
			die "ERROR: PKG_GIT_CLONE_DEPTH is not a number! (${PKG_GIT_CLONE_DEPTH})"
		fi
	fi

	if [ -n "${PKG_GIT_SUBMODULE_DEPTH}" ]; then
		if [[ "${PKG_GIT_SUBMODULE_DEPTH}" =~ ^[0-9]+$ ]]; then
			GIT_SUBMODULE_PARAMS="${GIT_SUBMODULE_PARAMS} --depth ${PKG_GIT_SUBMODULE_DEPTH}"
		else
			die "ERROR: PKG_GIT_SUBMODULE_DEPTH is not a number! (${PKG_GIT_SUBMODULE_DEPTH})"
		fi
	fi

	GIT_FOUND="no"
	opwd="$(pwd)"
	for d in "${SOURCES}/${1}/${1}-"*; do
		if [ -d "${d}/.git" ]; then
			if [ "${GIT_FOUND}" = "no" ]; then
				cd "${d}"
				if [ "${PKG_URL}" = "$(git remote get-url origin)" ]; then
					if [[ -z "${PKG_GIT_CLONE_BRANCH}" ]] || [[ $(git branch | grep "^\* ${PKG_GIT_CLONE_BRANCH}$" | wc -l) -eq 1 ]]; then
						GIT_FOUND="yes"
						GIT_DIR="${d}"
						_get_repo_clean
					elif [ $(git branch | grep "^  ${PKG_GIT_CLONE_BRANCH}$" | wc -l) -eq 1 ]; then
						GIT_FOUND="yes"
						GIT_DIR="${d}"
						_get_repo_clean
						git checkout "${PKG_GIT_CLONE_BRANCH}"
					elif [ $(git branch -a | grep "^  remotes/origin/${PKG_GIT_CLONE_BRANCH}$" | wc -l) -eq 1 ]; then
						GIT_FOUND="yes"
						GIT_DIR="${d}"
						_get_repo_clean
						git checkout -b "${PKG_GIT_CLONE_BRANCH}" "origin/${PKG_GIT_CLONE_BRANCH}"
					else
						build_msg "CLR_CLEAN" "DELETE" "(${d})"
						cd "${opwd}"
						rm -rf "${d}"
					fi
					if [ "${GIT_FOUND}" = "yes" ]; then
						build_msg "CLR_GET" "GIT PULL" "${1}"
						git pull
						cd "${opwd}"
					fi
				else
					build_msg "CLR_CLEAN" "DELETE" "(${d})"
					cd "${opwd}"
					rm -rf "${d}"
				fi
			fi
		else
			build_msg "CLR_CLEAN" "DELETE" "(${d})"
			rm -rf "${d}"
		fi
	done
	cd "${opwd}"

	if [ "${GIT_FOUND}" = "no" ]; then
		build_msg "CLR_GET" "GIT CLONE" "${1}"
		git clone ${GIT_CLONE_PARAMS} "${PKG_URL}" "${PACKAGE}"
	elif [ ! "${GIT_DIR}" = "${PACKAGE}" ]; then
		mv "${GIT_DIR}" "${PACKAGE}"
	fi

	(
		cd "${PACKAGE}"
		[ $(git log --oneline --pretty=tformat:"%H" | grep "^${PKG_VERSION}" | wc -l) -eq 1 ] || die "There is no commit '${PKG_VERSION}' on branch '$(git branch | grep ^\* | cut -d ' ' -f2)' of package '${1}'! Aborting!"
		git reset --hard "${PKG_VERSION}"
		build_msg "CLR_GET" "GIT SUBMODULE" "${1}"
		git submodule update --init --recursive ${GIT_SUBMODULE_PARAMS}
	)

	GIT_SHA="$(git ls-remote "${PACKAGE}" | grep -m1 HEAD | awk '{print $1;}')"

	if [ -n "${PKG_GIT_SHA}" -a "${PKG_GIT_SHA}" != "${GIT_SHA}" ]; then
		build_msg "CLR_WARNING" "WARNING" "Incorrect git hash in repository: got ${GIT_SHA}, wanted ${PKG_GIT_SHA}"
	fi
}

_get_file() {
	build_msg "CLR_GET" "GET" "${1} (file)" "indent"
	pkg_lock_status "GETPKG" "${PKG_NAME}" "unpack" "processing package file..."
}

_get_file_already_downloaded() {
	[ ! -f "${PACKAGE}" -o ! -f "${STAMP_URL}" -o ! -f "${STAMP_SHA}" ] && return 1
	[ -n "${PKG_SHA256}" -a "$(cat ${STAMP_SHA} 2>/dev/null)" != "${PKG_SHA256}" ] && return 1
	return 0
}

_get_archive() {
	# Latest file already present, exit now...
	_get_file_already_downloaded && exit 0

	lock_source_dir "${1}"

	# Check again in case of concurrent access - if nothing needs to be downloaded, exit now...
	_get_file_already_downloaded && exit 0

	# At this point, we need to download something...
	build_msg "CLR_GET" "GET" "${1} (archive)" "indent"

	pkg_lock_status "GETPKG" "${PKG_NAME}" "unpack" "downloading package..."

	PACKAGE_MIRROR="${REPO_MIRROR}/${PKG_NAME}/${PKG_SOURCE_NAME}"
	[ "${VERBOSE}" != "yes" ] && WGET_OPT=-q
	WGET_CMD="wget --output-file=- --timeout=30 --tries=3 --passive-ftp --no-check-certificate -c ${WGET_OPT} --progress=bar:force --show-progress -O ${PACKAGE}"

	# unset LD_LIBRARY_PATH to stop wget from using toolchain/lib and loading libssl.so/libcrypto.so instead of host libraries
	unset LD_LIBRARY_PATH

	rm -f "${STAMP_URL}" "${STAMP_SHA}"

	NBWGET=10
	while [ ${NBWGET} -gt 0 ]; do
		for url in "${PKG_URL}" "${PACKAGE_MIRROR}"; do
			rm -f "${PACKAGE}"
			if ${WGET_CMD} "${url}"; then
				CALC_SHA256=$(sha256sum "${PACKAGE}" | cut -d" " -f1)

				[ -z "${PKG_SHA256}" -o "${PKG_SHA256}" = "${CALC_SHA256}" ] && break 2

				build_msg "CLR_WARNING" "WARNING" "Incorrect checksum calculated on downloaded file: got ${CALC_SHA256} wanted ${PKG_SHA256}"
			fi
		done
		NBWGET=$((NBWGET - 1))
	done

	if [ ${NBWGET} -eq 0 ]; then
		die "\nCannot get ${1} sources : ${PKG_URL}\nTry later!"
	else
		build_msg "CLR_INFO" "INFO" "Calculated checksum: ${CALC_SHA256}"
		echo "${PKG_URL}" >"${STAMP_URL}"
		echo "${CALC_SHA256}" >"${STAMP_SHA}"
	fi
}

if [ -n "${PKG_URL}" -a -n "${PKG_SOURCE_NAME}" ]; then
	mkdir -p "${SOURCES}/${1}"

	PACKAGE="${SOURCES}/${1}/${PKG_SOURCE_NAME}"

	STAMP_URL="${PACKAGE}.url"
	STAMP_SHA="${PACKAGE}.sha256"

	# determine get handler based on protocol and/or filename
	case "${PKG_URL}" in
		git://* | *.git)
			get_handler="git"
			;;
		file://*)
			get_handler="file"
			;;
		*)
			get_handler="archive"
			;;
	esac

	if ! listcontains "${GET_HANDLER_SUPPORT}" "${get_handler}"; then
		die "ERROR: get handler \"${get_handler}\" is not supported, unable to get package ${1} - aborting!"
	else

		case "${get_handler}" in
			git)
				_get_git
				;;
			file)
				_get_file
				;;
			archive)
				_get_archive
				;;
			*)
				die "ERROR: get handler \"${get_handler}\" does not exist, unable to get package ${1} - aborting!"
				;;
		esac
	fi
fi

exit 0
